# 3AI工作室项目环境配置模板
# 复制此文件为 .env 并根据实际情况修改配置值
# 注意：.env 文件包含敏感信息，不应提交到版本控制系统

# ============================================================================
# 应用基础配置
# ============================================================================

# 应用名称
APP_NAME={{PROJECT_NAME}}

# 运行环境 (development, testing, staging, production)
APP_ENV=development

# 调试模式 (true/false)
APP_DEBUG=true

# 应用版本
APP_VERSION=1.0.0

# 服务器配置
APP_HOST=localhost
APP_PORT=3000

# 应用根URL
APP_URL=http://localhost:3000

# ============================================================================
# 数据库配置
# ============================================================================

# 主数据库连接 (PostgreSQL)
DATABASE_URL=postgresql://username:password@localhost:5432/{{PROJECT_NAME}}

# 数据库连接池配置
DATABASE_POOL_SIZE=10
DATABASE_POOL_MAX_OVERFLOW=20
DATABASE_POOL_TIMEOUT=30

# 数据库连接重试
DATABASE_RETRY_ATTEMPTS=3
DATABASE_RETRY_DELAY=1

# 读写分离 (可选)
# DATABASE_READ_URL=postgresql://readonly:password@localhost:5433/{{PROJECT_NAME}}

# ============================================================================
# Redis 配置
# ============================================================================

# Redis 连接
REDIS_URL=redis://localhost:6379/0

# Redis 连接池
REDIS_POOL_SIZE=10
REDIS_POOL_TIMEOUT=5

# Redis 集群 (可选)
# REDIS_CLUSTER_NODES=localhost:7000,localhost:7001,localhost:7002

# ============================================================================
# API 配置
# ============================================================================

# API 基础路径
API_BASE_URL=http://localhost:3000/api

# API 版本
API_VERSION=v1

# API 前缀
API_PREFIX=/api/v1

# 跨域配置
CORS_ORIGINS=http://localhost:3000,http://localhost:5173
CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_HEADERS=Content-Type,Authorization

# API 限流
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# ============================================================================
# 认证和安全配置
# ============================================================================

# JWT 密钥 (生产环境请使用强密钥)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT 过期时间
JWT_EXPIRES_IN=7d
JWT_REFRESH_EXPIRES_IN=30d

# JWT 算法
JWT_ALGORITHM=HS256

# 密码加密
PASSWORD_HASH_ROUNDS=12

# API Key (如果使用)
# API_KEY=your-api-key

# 会话密钥
SESSION_SECRET=your-session-secret-key

# CSRF 保护
CSRF_SECRET=your-csrf-secret-key

# ============================================================================
# 第三方服务配置
# ============================================================================

# 邮件服务 (SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_FROM=noreply@{{PROJECT_NAME}}.com
SMTP_TLS=true

# 短信服务 (示例：阿里云)
# SMS_ACCESS_KEY=your-access-key
# SMS_ACCESS_SECRET=your-access-secret
# SMS_SIGN_NAME=your-sign-name
# SMS_TEMPLATE_CODE=SMS_123456789

# 对象存储 (示例：AWS S3)
# AWS_ACCESS_KEY_ID=your-access-key
# AWS_SECRET_ACCESS_KEY=your-secret-key
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=your-bucket-name

# 支付服务 (示例：Stripe)
# STRIPE_PUBLIC_KEY=pk_test_...
# STRIPE_SECRET_KEY=sk_test_...
# STRIPE_WEBHOOK_SECRET=whsec_...

# 地图服务
# GOOGLE_MAPS_API_KEY=your-google-maps-api-key
# BAIDU_MAPS_API_KEY=your-baidu-maps-api-key

# ============================================================================
# 日志配置
# ============================================================================

# 日志级别 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# 日志文件路径
LOG_FILE=logs/app.log

# 日志文件大小限制 (MB)
LOG_MAX_SIZE=10

# 日志文件保留数量
LOG_BACKUP_COUNT=5

# 日志格式
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# 结构化日志 (true/false)
LOG_JSON=false

# ============================================================================
# 缓存配置
# ============================================================================

# 缓存类型 (redis, memory, file)
CACHE_TYPE=redis

# 缓存默认过期时间 (秒)
CACHE_DEFAULT_TIMEOUT=300

# 缓存键前缀
CACHE_KEY_PREFIX={{PROJECT_NAME}}:

# ============================================================================
# 任务队列配置
# ============================================================================

# Celery Broker (Redis)
CELERY_BROKER_URL=redis://localhost:6379/1

# Celery Result Backend
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# 任务超时时间 (秒)
CELERY_TASK_TIMEOUT=300

# 任务重试次数
CELERY_TASK_RETRY=3

# ============================================================================
# 监控和性能
# ============================================================================

# 性能监控
ENABLE_METRICS=true
METRICS_PORT=9090

# 健康检查
HEALTH_CHECK_ENDPOINT=/health

# 请求追踪
ENABLE_TRACING=true
TRACING_SAMPLE_RATE=0.1

# Sentry 错误监控
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
# SENTRY_ENVIRONMENT=development

# ============================================================================
# 文件上传配置
# ============================================================================

# 上传文件大小限制 (MB)
UPLOAD_MAX_SIZE=10

# 允许的文件类型
UPLOAD_ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf,doc,docx

# 上传文件存储路径
UPLOAD_FOLDER=uploads

# ============================================================================
# 前端配置
# ============================================================================

# 前端应用URL
FRONTEND_URL=http://localhost:5173

# 静态文件路径
STATIC_FILES_PATH=/static

# CDN 配置
# CDN_URL=https://cdn.example.com

# ============================================================================
# 开发环境专用配置
# ============================================================================

# 热重载
HOT_RELOAD=true

# 调试工具
ENABLE_DEBUG_TOOLBAR=true

# 数据库查询日志
DATABASE_ECHO=false

# 模拟延迟 (毫秒)
# SIMULATE_DELAY=100

# ============================================================================
# 测试环境配置
# ============================================================================

# 测试数据库
# TEST_DATABASE_URL=postgresql://test:test@localhost:5432/{{PROJECT_NAME}}_test

# 测试 Redis
# TEST_REDIS_URL=redis://localhost:6379/15

# 禁用外部服务调用
# DISABLE_EXTERNAL_CALLS=true

# ============================================================================
# 生产环境配置
# ============================================================================

# 生产环境特定配置在部署时设置
# 包括：
# - 真实的数据库连接字符串
# - 强密钥和密码
# - 第三方服务的生产环境密钥
# - 监控和日志服务配置
# - SSL/TLS 证书配置

# ============================================================================
# 自定义业务配置
# ============================================================================

# 业务相关的自定义配置
# 根据具体项目需求添加

# 示例：电商项目
# PAYMENT_TIMEOUT=300
# ORDER_EXPIRY_HOURS=24
# INVENTORY_CHECK_INTERVAL=60

# 示例：内容管理系统
# CONTENT_CACHE_DURATION=3600
# IMAGE_RESIZE_QUALITY=85
# SEARCH_RESULTS_PER_PAGE=20

# ============================================================================
# 配置说明
# ============================================================================
# 
# 1. 环境变量优先级：
#    系统环境变量 > .env.local > .env.{environment} > .env
# 
# 2. 敏感信息处理：
#    - 生产环境密钥不应硬编码
#    - 使用密钥管理服务 (如 AWS Secrets Manager)
#    - 定期轮换密钥
# 
# 3. 配置验证：
#    - 启动时验证必需的配置项
#    - 使用 Pydantic 进行配置验证
#    - 提供默认值和配置文档
# 
# 4. 多环境管理：
#    - .env.development
#    - .env.testing  
#    - .env.staging
#    - .env.production
# 
# ============================================================================