# 前端项目 Dockerfile 模板 - 3AI工作室
# 适用于 React/Vue/Angular 等现代前端项目
# 多阶段构建，优化镜像大小和安全性

# ================================
# 阶段1: 构建阶段 (Build Stage)
# ================================
FROM node:18-alpine AS builder

# 设置工作目录
WORKDIR /app

# 设置环境变量
ENV NODE_ENV=production
ENV CI=true
ENV GENERATE_SOURCEMAP=false

# 安装系统依赖
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# 复制 package 文件
COPY package*.json ./
COPY yarn.lock* ./

# 安装依赖
# 使用 npm ci 或 yarn install --frozen-lockfile 确保一致性
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production=false; \
    else \
        npm ci; \
    fi

# 复制源代码
COPY . .

# 构建应用
RUN if [ -f yarn.lock ]; then \
        yarn build; \
    else \
        npm run build; \
    fi

# 清理开发依赖
RUN if [ -f yarn.lock ]; then \
        yarn install --production --ignore-scripts --prefer-offline; \
    else \
        npm prune --production; \
    fi

# ================================
# 阶段2: 生产阶段 (Production Stage)
# ================================
FROM nginx:1.25-alpine AS production

# 安装必要工具
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# 复制自定义 Nginx 配置
COPY nginx.conf /etc/nginx/nginx.conf
COPY default.conf /etc/nginx/conf.d/default.conf

# 从构建阶段复制构建产物
COPY --from=builder /app/dist /usr/share/nginx/html
COPY --from=builder /app/public /usr/share/nginx/html

# 设置正确的权限
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# 创建必要的目录
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    mkdir -p /var/cache/nginx/fastcgi_temp && \
    mkdir -p /var/cache/nginx/uwsgi_temp && \
    mkdir -p /var/cache/nginx/scgi_temp && \
    chown -R nginx:nginx /var/cache/nginx

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# 暴露端口
EXPOSE 80

# 切换到非 root 用户
USER nginx

# 启动命令
CMD ["nginx", "-g", "daemon off;"]

# ================================
# 开发环境 Dockerfile
# ================================
# 如果需要开发环境镜像，可以使用以下配置：

# FROM node:18-alpine AS development
# 
# WORKDIR /app
# 
# # 安装开发依赖
# RUN apk add --no-cache git
# 
# # 复制 package 文件
# COPY package*.json ./
# COPY yarn.lock* ./
# 
# # 安装所有依赖（包括开发依赖）
# RUN if [ -f yarn.lock ]; then \
#         yarn install; \
#     else \
#         npm install; \
#     fi
# 
# # 复制源代码
# COPY . .
# 
# # 暴露端口
# EXPOSE 3000
# 
# # 启动开发服务器
# CMD if [ -f yarn.lock ]; then \
#         yarn start; \
#     else \
#         npm start; \
#     fi

# ================================
# 使用说明
# ================================

# 1. 构建镜像：
#    docker build -t my-frontend-app .
#    docker build --target development -t my-frontend-app:dev .

# 2. 运行容器：
#    docker run -p 80:80 my-frontend-app
#    docker run -p 3000:3000 -v $(pwd):/app my-frontend-app:dev

# 3. 多平台构建：
#    docker buildx build --platform linux/amd64,linux/arm64 -t my-app .

# 4. 环境变量：
#    docker run -e REACT_APP_API_URL=https://api.example.com my-app

# 5. 健康检查：
#    docker ps 查看容器健康状态

# 6. 日志查看：
#    docker logs container_name

# ================================
# 优化建议
# ================================

# 1. 使用 .dockerignore 文件排除不必要的文件
# 2. 利用 Docker 层缓存，先复制 package.json
# 3. 使用多阶段构建减小镜像大小
# 4. 设置合适的健康检查
# 5. 使用非 root 用户运行
# 6. 设置资源限制
# 7. 使用官方基础镜像
# 8. 定期更新基础镜像

# ================================
# 安全最佳实践
# ================================

# 1. 使用最新的稳定版本
# 2. 定期扫描漏洞
# 3. 最小化镜像内容
# 4. 使用非特权用户
# 5. 设置只读文件系统
# 6. 限制网络访问
# 7. 使用密钥管理
# 8. 启用安全扫描

# ================================
# 性能优化
# ================================

# 1. 使用 Alpine Linux 减小镜像大小
# 2. 合并 RUN 指令减少层数
# 3. 清理包管理器缓存
# 4. 使用 .dockerignore 排除文件
# 5. 启用 Nginx 压缩
# 6. 配置缓存策略
# 7. 使用 CDN 加速
# 8. 启用 HTTP/2

# ================================
# 监控和日志
# ================================

# 1. 配置结构化日志
# 2. 设置日志轮转
# 3. 监控容器资源使用
# 4. 设置告警规则
# 5. 收集应用指标
# 6. 配置链路追踪
# 7. 设置错误监控
# 8. 定期备份数据