# Docker Compose 开发环境模板 - 3AI工作室
# 适用于本地开发环境，包含热重载、调试支持、开发工具等
# 使用方法: docker-compose -f docker-compose.dev.yml up

version: '3.8'

# ================================
# 服务定义
# ================================
services:
  # ================================
  # 前端开发服务
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${PROJECT_NAME:-myapp}-frontend-dev
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
      - "${FRONTEND_HMR_PORT:-3001}:3001"  # 热重载端口
    volumes:
      # 源码挂载，支持热重载
      - ./frontend:/app
      - /app/node_modules  # 避免覆盖容器内的 node_modules
      # 开发工具配置
      - ./frontend/.eslintrc.js:/app/.eslintrc.js
      - ./frontend/.prettierrc:/app/.prettierrc
      - ./frontend/tsconfig.json:/app/tsconfig.json
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true  # 文件监听兼容性
      - FAST_REFRESH=true
      - REACT_APP_API_URL=http://localhost:${BACKEND_PORT:-8000}
      - REACT_APP_WS_URL=ws://localhost:${BACKEND_PORT:-8000}
    networks:
      - app-network
    depends_on:
      - backend
    restart: unless-stopped
    stdin_open: true  # 支持交互式输入
    tty: true
    command: >
      sh -c "npm install &&
             npm run start"

  # ================================
  # 后端开发服务
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: ${PROJECT_NAME:-myapp}-backend-dev
    ports:
      - "${BACKEND_PORT:-8000}:8000"
      - "${DEBUG_PORT:-9229}:9229"  # Node.js 调试端口
    volumes:
      # 源码挂载，支持热重载
      - ./backend:/app
      - /app/node_modules
      # 日志目录
      - ./logs:/app/logs
      # 上传文件目录
      - ./uploads:/app/uploads
    environment:
      - NODE_ENV=development
      - DEBUG=app:*
      - LOG_LEVEL=debug
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/${DB_NAME:-myapp_dev}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-secret-key}
      - CORS_ORIGIN=http://localhost:${FRONTEND_PORT:-3000}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    stdin_open: true
    tty: true
    command: >
      sh -c "npm install &&
             npm run dev"

  # ================================
  # 数据库服务
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-myapp}-postgres-dev
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-myapp_dev}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      # 数据持久化
      - postgres_dev_data:/var/lib/postgresql/data
      # 初始化脚本
      - ./database/init:/docker-entrypoint-initdb.d
      # 配置文件
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-myapp_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ================================
  # Redis 缓存服务
  # ================================
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-myapp}-redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      # 数据持久化
      - redis_dev_data:/data
      # 配置文件
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # ================================
  # 开发工具服务
  # ================================
  
  # pgAdmin - PostgreSQL 管理工具
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${PROJECT_NAME:-myapp}-pgadmin-dev
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - app-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Redis Commander - Redis 管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${PROJECT_NAME:-myapp}-redis-commander-dev
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    networks:
      - app-network
    depends_on:
      - redis
    restart: unless-stopped

  # Mailhog - 邮件测试工具
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ${PROJECT_NAME:-myapp}-mailhog-dev
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025"  # Web UI
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP
    networks:
      - app-network
    restart: unless-stopped

  # Nginx 反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: ${PROJECT_NAME:-myapp}-nginx-dev
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - nginx  # 使用 --profile nginx 启用

  # 文档服务
  docs:
    image: node:18-alpine
    container_name: ${PROJECT_NAME:-myapp}-docs-dev
    ports:
      - "${DOCS_PORT:-3002}:3000"
    volumes:
      - ./docs:/app
      - /app/node_modules
    working_dir: /app
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - docs  # 使用 --profile docs 启用
    command: >
      sh -c "npm install &&
             npm run dev"

# ================================
# 网络配置
# ================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# 数据卷配置
# ================================
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  pgadmin_dev_data:
    driver: local

# ================================
# 使用说明
# ================================

# 1. 环境变量配置：
#    创建 .env.dev 文件，设置以下变量：
#    PROJECT_NAME=myapp
#    FRONTEND_PORT=3000
#    BACKEND_PORT=8000
#    DB_NAME=myapp_dev
#    DB_USER=postgres
#    DB_PASSWORD=password
#    JWT_SECRET=your-dev-secret

# 2. 启动开发环境：
#    docker-compose -f docker-compose.dev.yml up
#    docker-compose -f docker-compose.dev.yml up -d  # 后台运行

# 3. 启动特定服务：
#    docker-compose -f docker-compose.dev.yml up frontend backend

# 4. 启用可选服务：
#    docker-compose -f docker-compose.dev.yml --profile nginx up
#    docker-compose -f docker-compose.dev.yml --profile docs up

# 5. 查看日志：
#    docker-compose -f docker-compose.dev.yml logs
#    docker-compose -f docker-compose.dev.yml logs -f frontend

# 6. 执行命令：
#    docker-compose -f docker-compose.dev.yml exec backend npm run migrate
#    docker-compose -f docker-compose.dev.yml exec frontend npm test

# 7. 重建服务：
#    docker-compose -f docker-compose.dev.yml build
#    docker-compose -f docker-compose.dev.yml up --build

# 8. 停止和清理：
#    docker-compose -f docker-compose.dev.yml down
#    docker-compose -f docker-compose.dev.yml down -v  # 删除数据卷

# ================================
# 开发工具访问地址
# ================================

# 应用服务：
# - 前端: http://localhost:3000
# - 后端: http://localhost:8000
# - API文档: http://localhost:8000/docs

# 数据库管理：
# - pgAdmin: http://localhost:5050
# - Redis Commander: http://localhost:8081

# 开发工具：
# - Mailhog: http://localhost:8025
# - 文档: http://localhost:3002

# 数据库连接：
# - PostgreSQL: localhost:5432
# - Redis: localhost:6379

# ================================
# 调试配置
# ================================

# Node.js 调试：
# 1. VS Code launch.json 配置：
# {
#   "type": "node",
#   "request": "attach",
#   "name": "Docker: Attach to Node",
#   "remoteRoot": "/app",
#   "localRoot": "${workspaceFolder}/backend",
#   "port": 9229,
#   "restart": true
# }

# 2. Chrome DevTools:
#    打开 chrome://inspect
#    点击 "Configure" 添加 localhost:9229

# ================================
# 性能优化建议
# ================================

# 1. 使用 .dockerignore 排除不必要文件
# 2. 利用 Docker 层缓存
# 3. 使用多阶段构建
# 4. 配置合适的资源限制
# 5. 使用 bind mount 而非 volume 提高性能
# 6. 启用文件监听优化
# 7. 配置合适的健康检查间隔
# 8. 使用 Alpine 镜像减小大小

# ================================
# 故障排查
# ================================

# 1. 检查容器状态：
#    docker-compose -f docker-compose.dev.yml ps

# 2. 查看容器日志：
#    docker-compose -f docker-compose.dev.yml logs service_name

# 3. 进入容器调试：
#    docker-compose -f docker-compose.dev.yml exec service_name sh

# 4. 检查网络连接：
#    docker-compose -f docker-compose.dev.yml exec backend ping postgres

# 5. 重启服务：
#    docker-compose -f docker-compose.dev.yml restart service_name

# 6. 清理和重建：
#    docker-compose -f docker-compose.dev.yml down
#    docker system prune
#    docker-compose -f docker-compose.dev.yml up --build