# 后端项目 Dockerfile 模板 - 3AI工作室
# 适用于 Node.js/Python/Java/Go 等后端项目
# 多阶段构建，支持多种语言和框架

# ================================
# Node.js 后端 Dockerfile
# ================================
FROM node:18-alpine AS nodejs-base

# 设置工作目录
WORKDIR /app

# 设置环境变量
ENV NODE_ENV=production
ENV PORT=3000

# 安装系统依赖
RUN apk add --no-cache \
    dumb-init \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# 复制 package 文件
COPY package*.json ./
COPY yarn.lock* ./

# 安装依赖
RUN if [ -f yarn.lock ]; then \
        yarn install --frozen-lockfile --production; \
    else \
        npm ci --only=production; \
    fi

# 复制源代码
COPY . .

# 设置权限
RUN chown -R nodejs:nodejs /app
USER nodejs

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# 暴露端口
EXPOSE $PORT

# 启动命令
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]

# ================================
# Python 后端 Dockerfile
# ================================
FROM python:3.11-alpine AS python-base

# 设置工作目录
WORKDIR /app

# 设置环境变量
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PORT=8000

# 安装系统依赖
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户
RUN addgroup -g 1001 -S python && \
    adduser -S python -u 1001

# 升级 pip
RUN pip install --upgrade pip

# 复制依赖文件
COPY requirements.txt ./
COPY requirements-prod.txt* ./

# 安装 Python 依赖
RUN pip install -r requirements.txt
RUN if [ -f requirements-prod.txt ]; then pip install -r requirements-prod.txt; fi

# 复制源代码
COPY . .

# 设置权限
RUN chown -R python:python /app
USER python

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:$PORT/health || exit 1

# 暴露端口
EXPOSE $PORT

# 启动命令
CMD ["python", "app.py"]
# 或者使用 Gunicorn
# CMD ["gunicorn", "--bind", "0.0.0.0:8000", "app:app"]

# ================================
# Java Spring Boot Dockerfile
# ================================
FROM openjdk:17-jdk-alpine AS java-builder

# 设置工作目录
WORKDIR /app

# 复制构建文件
COPY pom.xml ./
COPY mvnw ./
COPY .mvn .mvn

# 下载依赖
RUN ./mvnw dependency:go-offline -B

# 复制源代码
COPY src src

# 构建应用
RUN ./mvnw clean package -DskipTests

# 生产阶段
FROM openjdk:17-jre-alpine AS java-production

# 安装系统依赖
RUN apk add --no-cache \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户
RUN addgroup -g 1001 -S spring && \
    adduser -S spring -u 1001

# 设置工作目录
WORKDIR /app

# 从构建阶段复制 JAR 文件
COPY --from=java-builder /app/target/*.jar app.jar

# 设置权限
RUN chown spring:spring app.jar
USER spring

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# 暴露端口
EXPOSE 8080

# 启动命令
ENTRYPOINT ["java", "-jar", "app.jar"]

# ================================
# Go 后端 Dockerfile
# ================================
FROM golang:1.21-alpine AS go-builder

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apk add --no-cache git

# 复制 go mod 文件
COPY go.mod go.sum ./

# 下载依赖
RUN go mod download

# 复制源代码
COPY . .

# 构建应用
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main .

# 生产阶段
FROM alpine:latest AS go-production

# 安装系统依赖
RUN apk add --no-cache \
    ca-certificates \
    curl \
    tzdata \
    && rm -rf /var/cache/apk/*

# 设置时区
ENV TZ=Asia/Shanghai
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# 创建非 root 用户
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001

# 设置工作目录
WORKDIR /root/

# 从构建阶段复制二进制文件
COPY --from=go-builder /app/main .

# 设置权限
RUN chown appuser:appuser main
USER appuser

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# 暴露端口
EXPOSE 8080

# 启动命令
CMD ["./main"]

# ================================
# 使用说明
# ================================

# 1. 选择合适的语言模板：
#    - Node.js: 使用 nodejs-base 阶段
#    - Python: 使用 python-base 阶段
#    - Java: 使用 java-builder 和 java-production 阶段
#    - Go: 使用 go-builder 和 go-production 阶段

# 2. 构建镜像：
#    docker build --target nodejs-base -t my-node-app .
#    docker build --target python-base -t my-python-app .
#    docker build --target java-production -t my-java-app .
#    docker build --target go-production -t my-go-app .

# 3. 运行容器：
#    docker run -p 3000:3000 my-node-app
#    docker run -p 8000:8000 my-python-app
#    docker run -p 8080:8080 my-java-app
#    docker run -p 8080:8080 my-go-app

# 4. 环境变量配置：
#    docker run -e NODE_ENV=production -e PORT=3000 my-app
#    docker run -e PYTHONUNBUFFERED=1 -e PORT=8000 my-app

# 5. 数据卷挂载：
#    docker run -v /host/data:/app/data my-app
#    docker run -v /host/logs:/app/logs my-app

# 6. 网络配置：
#    docker run --network my-network my-app

# ================================
# 最佳实践
# ================================

# 1. 安全性：
#    - 使用非 root 用户运行
#    - 定期更新基础镜像
#    - 扫描安全漏洞
#    - 最小化镜像内容

# 2. 性能优化：
#    - 使用多阶段构建
#    - 利用 Docker 层缓存
#    - 合并 RUN 指令
#    - 清理包管理器缓存

# 3. 监控和日志：
#    - 配置健康检查
#    - 结构化日志输出
#    - 设置资源限制
#    - 监控容器指标

# 4. 开发体验：
#    - 使用 .dockerignore
#    - 配置热重载
#    - 设置调试模式
#    - 本地开发环境

# ================================
# 环境变量说明
# ================================

# Node.js:
# - NODE_ENV: 运行环境 (development/production)
# - PORT: 服务端口
# - LOG_LEVEL: 日志级别

# Python:
# - PYTHONUNBUFFERED: 禁用输出缓冲
# - PYTHONDONTWRITEBYTECODE: 禁用 .pyc 文件
# - FLASK_ENV: Flask 环境
# - DJANGO_SETTINGS_MODULE: Django 设置模块

# Java:
# - JAVA_OPTS: JVM 参数
# - SPRING_PROFILES_ACTIVE: Spring 配置文件
# - SERVER_PORT: 服务端口

# Go:
# - GIN_MODE: Gin 模式 (debug/release)
# - PORT: 服务端口
# - LOG_LEVEL: 日志级别

# ================================
# 故障排查
# ================================

# 1. 查看容器日志：
#    docker logs container_name
#    docker logs -f container_name

# 2. 进入容器调试：
#    docker exec -it container_name sh
#    docker exec -it container_name bash

# 3. 检查健康状态：
#    docker ps
#    docker inspect container_name

# 4. 资源使用情况：
#    docker stats container_name
#    docker system df

# 5. 网络连接测试：
#    docker exec container_name curl -f http://localhost:port/health
#    docker network ls

# ================================
# 部署建议
# ================================

# 1. 使用 Docker Compose 编排
# 2. 配置负载均衡
# 3. 设置自动重启策略
# 4. 配置日志收集
# 5. 监控容器状态
# 6. 定期备份数据
# 7. 实施滚动更新
# 8. 配置告警通知