# Nginx 配置模板 - 3AI工作室
# 适用于前端应用的生产环境部署
# 支持 SPA 路由、静态资源优化、安全配置等

# ================================
# 全局配置
# ================================
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

# 事件配置
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# ================================
# HTTP 配置
# ================================
http {
    # ================================
    # 基础配置
    # ================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 字符集
    charset utf-8;

    # 服务器标识
    server_tokens off;

    # ================================
    # 日志格式
    # ================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    log_format json escape=json
        '{';
            '"time_local":"$time_local",';
            '"remote_addr":"$remote_addr",';
            '"remote_user":"$remote_user",';
            '"request":"$request",';
            '"status": "$status",';
            '"body_bytes_sent":"$body_bytes_sent",';
            '"request_time":"$request_time",';
            '"http_referrer":"$http_referer",';
            '"http_user_agent":"$http_user_agent"';
        '}';

    access_log /var/log/nginx/access.log main;

    # ================================
    # 性能优化
    # ================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # ================================
    # Gzip 压缩
    # ================================
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # ================================
    # Brotli 压缩（如果支持）
    # ================================
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types
    #     text/plain
    #     text/css
    #     application/json
    #     application/javascript
    #     text/xml
    #     application/xml
    #     application/xml+rss
    #     text/javascript;

    # ================================
    # 安全配置
    # ================================
    # 隐藏 Nginx 版本
    server_tokens off;

    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # ================================
    # 上游服务器配置
    # ================================
    upstream backend {
        server backend:8000;
        # 负载均衡配置
        # server backend1:8000 weight=3;
        # server backend2:8000 weight=2;
        # server backend3:8000 backup;
        
        # 健康检查
        keepalive 32;
    }

    # ================================
    # 限流配置
    # ================================
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # ================================
    # 缓存配置
    # ================================
    proxy_cache_path /var/cache/nginx/proxy_cache levels=1:2 keys_zone=api_cache:10m max_size=1g inactive=60m use_temp_path=off;

    # ================================
    # 主服务器配置
    # ================================
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # ================================
        # 安全配置
        # ================================
        # 限制连接数
        limit_conn conn_limit_per_ip 20;

        # 隐藏敏感文件
        location ~ /\. {
            deny all;
        }

        location ~ ~$ {
            deny all;
        }

        # ================================
        # 静态资源配置
        # ================================
        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # 跨域配置
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
            add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
            
            # 压缩
            gzip_static on;
        }

        # HTML 文件缓存
        location ~* \.(html|htm)$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
        }

        # Manifest 文件
        location ~* \.(manifest|appcache|xml)$ {
            expires 0;
            add_header Cache-Control "no-cache";
        }

        # ================================
        # API 代理配置
        # ================================
        location /api/ {
            # 限流
            limit_req zone=api burst=20 nodelay;
            
            # 代理配置
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # 超时配置
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # 缓存配置（可选）
            # proxy_cache api_cache;
            # proxy_cache_valid 200 302 10m;
            # proxy_cache_valid 404 1m;
            # proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        }

        # 登录接口特殊限流
        location /api/auth/login {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket 代理
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket 特殊配置
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # ================================
        # SPA 路由支持
        # ================================
        location / {
            try_files $uri $uri/ /index.html;
            
            # 安全头
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";
        }

        # ================================
        # 健康检查
        # ================================
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # ================================
        # 状态监控
        # ================================
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }

        # ================================
        # 错误页面
        # ================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        location = /404.html {
            root /usr/share/nginx/html;
        }
    }

    # ================================
    # HTTPS 配置（生产环境）
    # ================================
    # server {
    #     listen 443 ssl http2;
    #     server_name example.com;
    #     root /usr/share/nginx/html;
    #     index index.html;
    # 
    #     # SSL 证书配置
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    # 
    #     # SSL 安全配置
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 10m;
    # 
    #     # HSTS
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    # 
    #     # 其他配置同 HTTP
    # }
    # 
    # # HTTP 重定向到 HTTPS
    # server {
    #     listen 80;
    #     server_name example.com;
    #     return 301 https://$server_name$request_uri;
    # }

    # ================================
    # 包含其他配置文件
    # ================================
    include /etc/nginx/conf.d/*.conf;
}

# ================================
# 使用说明
# ================================

# 1. 基本使用：
#    - 将此文件复制到 /etc/nginx/nginx.conf
#    - 或在 Docker 中挂载: -v ./nginx.conf:/etc/nginx/nginx.conf

# 2. 自定义配置：
#    - 修改 server_name 为实际域名
#    - 调整 upstream 后端服务器地址
#    - 配置 SSL 证书路径
#    - 设置合适的缓存策略

# 3. 性能调优：
#    - 根据服务器配置调整 worker_processes
#    - 调整 worker_connections
#    - 优化缓存大小和过期时间
#    - 配置合适的压缩级别

# 4. 安全加固：
#    - 启用 HTTPS
#    - 配置防火墙规则
#    - 设置访问控制
#    - 定期更新 SSL 证书

# 5. 监控和日志：
#    - 配置日志轮转
#    - 设置监控告警
#    - 分析访问日志
#    - 监控性能指标

# ================================
# 常用命令
# ================================

# 测试配置：
# nginx -t

# 重载配置：
# nginx -s reload

# 查看状态：
# curl http://localhost/nginx_status

# 查看日志：
# tail -f /var/log/nginx/access.log
# tail -f /var/log/nginx/error.log

# ================================
# 故障排查
# ================================

# 1. 配置语法错误：
#    nginx -t

# 2. 权限问题：
#    检查文件权限和 SELinux

# 3. 端口冲突：
#    netstat -tlnp | grep :80

# 4. 上游服务器连接：
#    curl -I http://backend:8000/health

# 5. 日志分析：
#    grep "error" /var/log/nginx/error.log

# ================================
# 优化建议
# ================================

# 1. 启用 HTTP/2
# 2. 配置 CDN
# 3. 使用 Brotli 压缩
# 4. 优化缓存策略
# 5. 启用 OCSP Stapling
# 6. 配置负载均衡
# 7. 设置健康检查
# 8. 监控性能指标