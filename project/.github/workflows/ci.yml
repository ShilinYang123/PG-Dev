name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: Install Node.js dependencies
      run: |
        cd project
        npm ci
        
    - name: Install Python dependencies
      run: |
        cd project
        pip install -r requirements.txt
        
    - name: Run ESLint
      run: |
        cd project
        npm run lint
        
    - name: Run Prettier check
      run: |
        cd project
        npm run format:check
        
    - name: Run TypeScript type check
      run: |
        cd project
        npm run type-check
        
    - name: Run Python linting (flake8)
      run: |
        cd project
        python -m flake8 .
        
    - name: Run Python type checking (mypy)
      run: |
        cd project
        python -m mypy .

  # 测试
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    needs: code-quality
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install Node.js dependencies
      run: |
        cd project
        npm ci
        
    - name: Install Python dependencies
      run: |
        cd project
        pip install -r requirements.txt
        
    - name: Run JavaScript/TypeScript tests
      run: |
        cd project
        npm run test:coverage
        
    - name: Run Python tests
      run: |
        cd project
        python -m pytest --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./project/coverage.xml,./project/coverage/lcov.info
        fail_ci_if_error: false

  # 构建
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd project
        npm ci
        
    - name: Build application
      run: |
        cd project
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          project/dist/
          project/build/
        retention-days: 7

  # Docker构建和推送
  docker:
    runs-on: ubuntu-latest
    name: Docker Build & Push
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: 3ai/project
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./project
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './project'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit
      run: |
        cd project
        npm audit --audit-level moderate
        
    - name: Run Python safety check
      run: |
        cd project
        pip install safety
        safety check

  # 性能测试
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd project
        npm ci
        
    - name: Build application
      run: |
        cd project
        npm run build
        
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        cd project
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Deploy to development server
      run: |
        echo "Deploying to development environment..."
        # 这里添加实际的部署脚本
        
  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [build, security, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production server
      run: |
        echo "Deploying to production environment..."
        # 这里添加实际的部署脚本