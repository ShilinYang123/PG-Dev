version: '3.8'

services:
  # 微信Webhook服务
  wechat-webhook:
    build:
      context: ../..
      dockerfile: docker/webhook/Dockerfile
    container_name: pmc-wechat-webhook
    ports:
      - "8080:8080"
    environment:
      # 从.env文件加载环境变量
      - WECHAT_CORP_ID=${WECHAT_CORP_ID}
      - WECHAT_CORP_SECRET=${WECHAT_CORP_SECRET}
      - WECHAT_AGENT_ID=${WECHAT_AGENT_ID}
      - WECHAT_BASE_URL=${WECHAT_BASE_URL:-https://qyapi.weixin.qq.com}
      - WECHAT_BOT_WEBHOOK_URL=${WECHAT_BOT_WEBHOOK_URL}
      - WECHAT_BOT_SECRET=${WECHAT_BOT_SECRET}
      
      # 数据库配置
      - MYSQL_HOST=${MYSQL_HOST:-mysql}
      - MYSQL_PORT=${MYSQL_PORT:-3306}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      
      - MONGODB_HOST=${MONGODB_HOST:-mongodb}
      - MONGODB_PORT=${MONGODB_PORT:-27017}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DATABASE=${REDIS_DATABASE:-0}
      
      # 日志级别
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - webhook_logs:/app/logs
      - ../../config:/app/config:ro
    networks:
      - pmc-network
    depends_on:
      - redis
      - mysql
      - mongodb
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: pmc-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD"
        else
          redis-server
        fi
      '
    volumes:
      - redis_data:/data
    networks:
      - pmc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: pmc-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ../../sql/init:/docker-entrypoint-initdb.d:ro
    networks:
      - pmc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB数据库
  mongodb:
    image: mongo:6.0
    container_name: pmc-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - ../../mongo/init:/docker-entrypoint-initdb.d:ro
    networks:
      - pmc-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: pmc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - pmc-network
    depends_on:
      - wechat-webhook
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  webhook_logs:
    driver: local
  redis_data:
    driver: local
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  pmc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16