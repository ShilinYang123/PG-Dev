#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÂàÜÊûêÂ§ö‰ΩôÊñá‰ª∂ÂíåÁõÆÂΩïÔºåÂå∫ÂàÜÊ†∏ÂøÉÂÜÖÂÆπÂíå‰∏¥Êó∂Êñá‰ª∂
"""

import os
import json
from pathlib import Path
from typing import List, Dict, Tuple

def analyze_extra_items() -> Dict[str, List[str]]:
    """
    ÂàÜÊûêÂ§ö‰ΩôÈ°πÁõÆÔºåÂàÜÁ±ª‰∏∫Ôºö‰øùÁïô„ÄÅÊ∏ÖÈô§„ÄÅÈúÄË¶ÅÁ°ÆËÆ§
    """
    
    # ‰ªéÊ£ÄÊü•Êä•Âëä‰∏≠ÊèêÂèñÁöÑÂ§ö‰ΩôÈ°πÁõÆÂàóË°®
    extra_items = [
        "docs/02-ÂºÄÂèë/GitÊèê‰∫§ÂâçÊ£ÄÊü•Á≥ªÁªü‰ΩøÁî®ËØ¥Êòé.md",
        "project/.gitignore",
        "project/backups",
        "project/config",
        "project/config/README.md",
        "project/config/default.yaml",
        "project/config/settings.yaml",
        "project/config/user_settings.yaml",
        "project/data",
        "project/data/knowledge_base",
        "project/htmlcov",
        "project/logs",
        "project/logs/pingao_ai.log",
        "project/logs/pingao_ai_audit.log",
        "project/logs/pingao_ai_error.log",
        "project/logs/pingao_ai_performance.log",
        "project/logs/Ê£ÄÊü•Êä•Âëä",
        "project/logs/Ê£ÄÊü•Êä•Âëä/enhanced_check_debug_20250710_142559.log",
        "project/plugins",
        "project/scripts/check_config.py",
        "project/scripts/create_cylinder.py",
        "project/scripts/debug_config.py",
        "project/scripts/debug_env_override.py",
        "project/scripts/debug_merge.py",
        "project/scripts/init_config.py",
        "project/scripts/test_config.py",
        "project/scripts/test_creo_config.py",
        "project/scripts/test_env_vars.py",
        "project/scripts/test_settings_fromdict.py",
        "project/src/creo/api_wrapper.py",
        "project/src/creo/geometry_operations.py",
        "project/temp",
        "project/uploads",
        "tools/git_pre_commit_check.py"
    ]
    
    # ÂàÜÁ±ªËßÑÂàô
    keep_items = []  # È°πÁõÆÊ†∏ÂøÉÂÜÖÂÆπÔºåÈúÄË¶Å‰øùÁïô
    remove_items = []  # ‰∏¥Êó∂Êñá‰ª∂ÔºåÂèØ‰ª•Ê∏ÖÈô§
    confirm_items = []  # ÈúÄË¶ÅÁ°ÆËÆ§ÁöÑÈ°πÁõÆ
    
    for item in extra_items:
        if should_keep(item):
            keep_items.append(item)
        elif should_remove(item):
            remove_items.append(item)
        else:
            confirm_items.append(item)
    
    return {
        "keep": keep_items,
        "remove": remove_items,
        "confirm": confirm_items
    }

def should_keep(item: str) -> bool:
    """
    Âà§Êñ≠ÊòØÂê¶Â∫îËØ•‰øùÁïôÁöÑÈ°πÁõÆÊ†∏ÂøÉÂÜÖÂÆπ
    """
    keep_patterns = [
        # ÈÖçÁΩÆÊñá‰ª∂ - È°πÁõÆÊ†∏ÂøÉ
        "project/config",
        "project/.gitignore",
        
        # Ê∫ê‰ª£Á†ÅÊñá‰ª∂ - È°πÁõÆÊ†∏ÂøÉ
        "project/src/creo/api_wrapper.py",
        "project/src/creo/geometry_operations.py",
        
        # ÈáçË¶ÅËÑöÊú¨ - È°πÁõÆÊ†∏ÂøÉ
        "project/scripts/create_cylinder.py",
        "project/scripts/init_config.py",
        
        # Êï∞ÊçÆÁõÆÂΩï - È°πÁõÆÊ†∏ÂøÉ
        "project/data",
        "project/data/knowledge_base",
        
        # Êèí‰ª∂ÁõÆÂΩï - È°πÁõÆÊ†∏ÂøÉ
        "project/plugins",
        
        # ‰∏ä‰º†ÁõÆÂΩï - È°πÁõÆÊ†∏ÂøÉ
        "project/uploads",
        
        # ÈáçË¶ÅÂ∑•ÂÖ∑
        "tools/git_pre_commit_check.py",
        
        # ÈáçË¶ÅÊñáÊ°£
        "docs/02-ÂºÄÂèë/GitÊèê‰∫§ÂâçÊ£ÄÊü•Á≥ªÁªü‰ΩøÁî®ËØ¥Êòé.md"
    ]
    
    return any(pattern in item for pattern in keep_patterns)

def should_remove(item: str) -> bool:
    """
    Âà§Êñ≠ÊòØÂê¶Â∫îËØ•Ê∏ÖÈô§ÁöÑ‰∏¥Êó∂Êñá‰ª∂
    """
    remove_patterns = [
        # ÊµãËØïË¶ÜÁõñÁéáÊñá‰ª∂ - ‰∏¥Êó∂Êñá‰ª∂
        "project/htmlcov",
        
        # ‰∏¥Êó∂ÁõÆÂΩï
        "project/temp",
        
        # Â§á‰ªΩÁõÆÂΩï
        "project/backups",
        
        # Ë∞ÉËØïÂíåÊµãËØïËÑöÊú¨ - ‰∏¥Êó∂Êñá‰ª∂
        "project/scripts/debug_",
        "project/scripts/test_",
        "project/scripts/check_config.py",
        
        # Êó•ÂøóÊñá‰ª∂ - ‰∏¥Êó∂Êñá‰ª∂
        "project/logs/pingao_ai",
        "project/logs/Ê£ÄÊü•Êä•Âëä"
    ]
    
    return any(pattern in item for pattern in remove_patterns)

def get_file_size(filepath: str) -> str:
    """
    Ëé∑ÂèñÊñá‰ª∂Â§ßÂ∞è
    """
    try:
        full_path = Path("s:/PG-Dev") / filepath
        if full_path.exists():
            if full_path.is_file():
                size = full_path.stat().st_size
                if size < 1024:
                    return f"{size}B"
                elif size < 1024 * 1024:
                    return f"{size/1024:.1f}KB"
                else:
                    return f"{size/(1024*1024):.1f}MB"
            else:
                # ÁõÆÂΩïÂ§ßÂ∞è
                total_size = sum(f.stat().st_size for f in full_path.rglob('*') if f.is_file())
                if total_size < 1024 * 1024:
                    return f"{total_size/1024:.1f}KB"
                else:
                    return f"{total_size/(1024*1024):.1f}MB"
        return "‰∏çÂ≠òÂú®"
    except Exception as e:
        return f"ÈîôËØØ: {e}"

def main():
    """
    ‰∏ªÂáΩÊï∞
    """
    print("=" * 80)
    print("Â§ö‰ΩôÊñá‰ª∂ÂíåÁõÆÂΩïÂàÜÊûêÊä•Âëä")
    print("=" * 80)
    
    analysis = analyze_extra_items()
    
    print("\nüü¢ Âª∫ËÆÆ‰øùÁïôÁöÑÈ°πÁõÆÊ†∏ÂøÉÂÜÖÂÆπ:")
    print("-" * 50)
    for item in analysis["keep"]:
        size = get_file_size(item)
        print(f"  ‚úì {item} ({size})")
    
    print("\nüî¥ Âª∫ËÆÆÊ∏ÖÈô§ÁöÑ‰∏¥Êó∂Êñá‰ª∂:")
    print("-" * 50)
    for item in analysis["remove"]:
        size = get_file_size(item)
        print(f"  ‚úó {item} ({size})")
    
    print("\nüü° ÈúÄË¶ÅÁ°ÆËÆ§ÁöÑÈ°πÁõÆ:")
    print("-" * 50)
    for item in analysis["confirm"]:
        size = get_file_size(item)
        print(f"  ? {item} ({size})")
    
    print("\nüìä ÁªüËÆ°‰ø°ÊÅØ:")
    print("-" * 50)
    print(f"  ‰øùÁïôÈ°πÁõÆ: {len(analysis['keep'])} ‰∏™")
    print(f"  Ê∏ÖÈô§È°πÁõÆ: {len(analysis['remove'])} ‰∏™")
    print(f"  Á°ÆËÆ§È°πÁõÆ: {len(analysis['confirm'])} ‰∏™")
    print(f"  ÊÄªËÆ°: {len(analysis['keep']) + len(analysis['remove']) + len(analysis['confirm'])} ‰∏™")
    
    # ‰øùÂ≠òÂàÜÊûêÁªìÊûú
    output_file = "s:/PG-Dev/project/temp/file_analysis_result.json"
    os.makedirs(os.path.dirname(output_file), exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(analysis, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìÑ ÂàÜÊûêÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞: {output_file}")
    print("\nüí° Âª∫ËÆÆ:")
    print("  1. È¶ñÂÖàÊ∏ÖÈô§‰∏¥Êó∂Êñá‰ª∂‰ª•ÈáäÊîæÁ©∫Èó¥")
    print("  2. Á°ÆËÆ§ÈúÄË¶ÅÁ°ÆËÆ§ÁöÑÈ°πÁõÆÊòØÂê¶‰∏∫È°πÁõÆÂøÖÈúÄ")
    print("  3. Êõ¥Êñ∞ÁõÆÂΩïÁªìÊûÑÊ†áÂáÜÊ∏ÖÂçï‰ª•ÂåÖÂê´‰øùÁïôÁöÑÊ†∏ÂøÉÂÜÖÂÆπ")

if __name__ == "__main__":
    main()